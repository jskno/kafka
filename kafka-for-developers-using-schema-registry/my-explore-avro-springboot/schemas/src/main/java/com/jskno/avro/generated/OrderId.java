/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.jskno.avro.generated;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class OrderId extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7034561539562284766L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderId\",\"namespace\":\"com.jskno.avro.generated\",\"fields\":[{\"name\":\"businessId\",\"type\":\"long\"},{\"name\":\"UUID\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
  }

  private static final BinaryMessageEncoder<OrderId> ENCODER =
      new BinaryMessageEncoder<OrderId>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OrderId> DECODER =
      new BinaryMessageDecoder<OrderId>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OrderId> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OrderId> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OrderId> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<OrderId>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OrderId to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OrderId from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OrderId instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OrderId fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long businessId;
  @Deprecated public java.util.UUID UUID;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrderId() {}

  /**
   * All-args constructor.
   * @param businessId The new value for businessId
   * @param UUID The new value for UUID
   */
  public OrderId(java.lang.Long businessId, java.util.UUID UUID) {
    this.businessId = businessId;
    this.UUID = UUID;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return businessId;
    case 1: return UUID;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      new org.apache.avro.Conversions.UUIDConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: businessId = (java.lang.Long)value$; break;
    case 1: UUID = (java.util.UUID)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'businessId' field.
   * @return The value of the 'businessId' field.
   */
  public long getBusinessId() {
    return businessId;
  }


  /**
   * Sets the value of the 'businessId' field.
   * @param value the value to set.
   */
  public void setBusinessId(long value) {
    this.businessId = value;
  }

  /**
   * Gets the value of the 'UUID' field.
   * @return The value of the 'UUID' field.
   */
  public java.util.UUID getUUID() {
    return UUID;
  }


  /**
   * Sets the value of the 'UUID' field.
   * @param value the value to set.
   */
  public void setUUID(java.util.UUID value) {
    this.UUID = value;
  }

  /**
   * Creates a new OrderId RecordBuilder.
   * @return A new OrderId RecordBuilder
   */
  public static com.jskno.avro.generated.OrderId.Builder newBuilder() {
    return new com.jskno.avro.generated.OrderId.Builder();
  }

  /**
   * Creates a new OrderId RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrderId RecordBuilder
   */
  public static com.jskno.avro.generated.OrderId.Builder newBuilder(com.jskno.avro.generated.OrderId.Builder other) {
    if (other == null) {
      return new com.jskno.avro.generated.OrderId.Builder();
    } else {
      return new com.jskno.avro.generated.OrderId.Builder(other);
    }
  }

  /**
   * Creates a new OrderId RecordBuilder by copying an existing OrderId instance.
   * @param other The existing instance to copy.
   * @return A new OrderId RecordBuilder
   */
  public static com.jskno.avro.generated.OrderId.Builder newBuilder(com.jskno.avro.generated.OrderId other) {
    if (other == null) {
      return new com.jskno.avro.generated.OrderId.Builder();
    } else {
      return new com.jskno.avro.generated.OrderId.Builder(other);
    }
  }

  /**
   * RecordBuilder for OrderId instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderId>
    implements org.apache.avro.data.RecordBuilder<OrderId> {

    private long businessId;
    private java.util.UUID UUID;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.jskno.avro.generated.OrderId.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.businessId)) {
        this.businessId = data().deepCopy(fields()[0].schema(), other.businessId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.UUID)) {
        this.UUID = data().deepCopy(fields()[1].schema(), other.UUID);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing OrderId instance
     * @param other The existing instance to copy.
     */
    private Builder(com.jskno.avro.generated.OrderId other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.businessId)) {
        this.businessId = data().deepCopy(fields()[0].schema(), other.businessId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.UUID)) {
        this.UUID = data().deepCopy(fields()[1].schema(), other.UUID);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'businessId' field.
      * @return The value.
      */
    public long getBusinessId() {
      return businessId;
    }


    /**
      * Sets the value of the 'businessId' field.
      * @param value The value of 'businessId'.
      * @return This builder.
      */
    public com.jskno.avro.generated.OrderId.Builder setBusinessId(long value) {
      validate(fields()[0], value);
      this.businessId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'businessId' field has been set.
      * @return True if the 'businessId' field has been set, false otherwise.
      */
    public boolean hasBusinessId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'businessId' field.
      * @return This builder.
      */
    public com.jskno.avro.generated.OrderId.Builder clearBusinessId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'UUID' field.
      * @return The value.
      */
    public java.util.UUID getUUID() {
      return UUID;
    }


    /**
      * Sets the value of the 'UUID' field.
      * @param value The value of 'UUID'.
      * @return This builder.
      */
    public com.jskno.avro.generated.OrderId.Builder setUUID(java.util.UUID value) {
      validate(fields()[1], value);
      this.UUID = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'UUID' field has been set.
      * @return True if the 'UUID' field has been set, false otherwise.
      */
    public boolean hasUUID() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'UUID' field.
      * @return This builder.
      */
    public com.jskno.avro.generated.OrderId.Builder clearUUID() {
      UUID = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OrderId build() {
      try {
        OrderId record = new OrderId();
        record.businessId = fieldSetFlags()[0] ? this.businessId : (java.lang.Long) defaultValue(fields()[0]);
        record.UUID = fieldSetFlags()[1] ? this.UUID : (java.util.UUID) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OrderId>
    WRITER$ = (org.apache.avro.io.DatumWriter<OrderId>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OrderId>
    READER$ = (org.apache.avro.io.DatumReader<OrderId>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










